{
  
    
        "post0": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yairmau.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "The time-dependent Ginzburg-Landau equation",
            "content": ". Introduction . Simulation of the Time-Dependent Ginzburg-Landau Equation $$ frac{ text{d}u}{ text{d}t}= u - u^3 +D nabla^2 u,$$ in 1 and 2 spatial dimensions. This is the simplest example of numerical integration through Finite Differences: . Euler method to advance time | Five-point stencil to compute the laplacian, periodic boundary conditions are assumed. See an example of the output here: https://www.youtube.com/watch?v=JgE9Px7zsQE | . Code . import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.axes_grid1 import make_axes_locatable import time as tm . # grid size n = 128 # for 1d simulation write N=(n,) N=(n,n) # diffusion coefficient D = 1.0 # spatial dimensions L = 100.0 dx = L / n x = np.arange(0,L,dx) # time t = 0.0 total_time = 3.0 # beware of the Von Neumann stability analysis # https://en.wikipedia.org/wiki/Von_Neumann_stability_analysis dt = 0.2 * 0.5 * dx**2 / D . define functions . def periodic_lap_1d(u,dx=1.0): return (+1*np.roll(u,+1) +1*np.roll(u,-1) -2*u) / dx**2 def periodic_lap_2d(u,dx=1.0): return (+1*np.roll(u,+1,axis=0) +1*np.roll(u,-1,axis=0) +1*np.roll(u,+1,axis=1) +1*np.roll(u,-1,axis=1) -4*u) / dx**2 f = lambda u: u - u**3 . initialize and start plotting . plt.ion() fig = plt.figure(1,figsize=(7,6)) plt.clf() ax = fig.add_subplot(111) # random initial condition u = 2*np.random.random(N)-1.0 if len(N) == 1: lap = periodic_lap_1d p, = ax.plot(x,u) ax.axis([x[0],x[-1],-1.1,1.1]) if len(N) == 2: lap = periodic_lap_2d p = ax.imshow(u,cmap=&quot;RdGy&quot;, vmin=-1.0, vmax=1.0,extent=[0,L,0,L]) # create an axes on the right side of ax. The width of cax will be 5% # of ax and the padding between cax and ax will be fixed at 0.15 inch. divider = make_axes_locatable(ax) colorbar_ax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.15) cbar = fig.colorbar(p, cax=colorbar_ax, ticks=[-1,-0.5,0,0.5,1]) ax.set_title(&quot;time={:5.1f}&quot;.format(0.0)) . Text(0.5, 1.0, &#39;time= 0.0&#39;) . start simulation . while t&lt;total_time: t += dt u = u + dt * (f(u) + D * lap(u,dx) ) # we don&#39;t need to plot again, just to update the data of the plot if len(N) == 1: p.set_data(x,u) if len(N) == 2: p.set_data(u) ax.set_title(&quot;time={:5.1f}&quot;.format(t)) fig.canvas.draw() .",
            "url": "https://yairmau.com/jupyter/2020/01/01/tdgle.html",
            "relUrl": "/jupyter/2020/01/01/tdgle.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Least Squares",
            "content": ". Introduction . This code produces the figure above. It&#39;s main tool is the curve_fit method, that allows us to fit any function to data, and get optimal parameter values. . The code . %matplotlib notebook import matplotlib.pyplot as plt import numpy as np import matplotlib.gridspec as gridspec import scipy.special from scipy.optimize import curve_fit import matplotlib.patches as patches . Make graph look pretty . %%capture out %matplotlib notebook # http://wiki.scipy.org/Cookbook/Matplotlib/LaTeX_Examples # this is a latex constant, don&#39;t change it. pts_per_inch = 72.27 # write &quot; the textwidth&quot; (or &quot; showthe columnwidth&quot; for a 2 collumn text) text_width_in_pts = 300.0 # inside a figure environment in latex, the result will be on the # dvi/pdf next to the figure. See url above. text_width_in_inches = text_width_in_pts / pts_per_inch # make rectangles with a nice proportion golden_ratio = 0.618 # figure.png or figure.eps will be intentionally larger, because it is prettier inverse_latex_scale = 2 # when compiling latex code, use # includegraphics[scale=(1/inverse_latex_scale)]{figure} # we want the figure to occupy 2/3 (for example) of the text width fig_proportion = (3.0 / 3.0) csize = inverse_latex_scale * fig_proportion * text_width_in_inches # always 1.0 on the first argument fig_size = (1.0 * csize, 0.85 * csize) # find out the fontsize of your latex text, and put it here text_size = inverse_latex_scale * 12 label_size = inverse_latex_scale * 10 tick_size = inverse_latex_scale * 8 # learn how to configure: # http://matplotlib.sourceforge.net/users/customizing.html params = {#&#39;backend&#39;: &#39;ps&#39;, &#39;axes.labelsize&#39;: 16, &#39;legend.fontsize&#39;: tick_size, &#39;legend.handlelength&#39;: 2.5, &#39;legend.borderaxespad&#39;: 0, &#39;axes.labelsize&#39;: label_size, &#39;xtick.labelsize&#39;: tick_size, &#39;ytick.labelsize&#39;: tick_size, &#39;font.family&#39;: &#39;serif&#39;, &#39;font.size&#39;: text_size, # &#39;font.serif&#39;: [&#39;Computer Modern Roman&#39;], &#39;ps.usedistiller&#39;: &#39;xpdf&#39;, &#39;text.usetex&#39;: True, &#39;figure.figsize&#39;: fig_size, # include here any neede package for latex &#39;text.latex.preamble&#39;: [r&#39; usepackage{amsmath}&#39;], } plt.rcParams.update(params) plt.clf() fig = plt.figure(1, figsize=fig_size) # figsize accepts only inches. fig.subplots_adjust(left=0.04, right=0.98, top=0.93, bottom=0.15, hspace=0.05, wspace=0.02) plt.ioff() . Configure axes and some function definitions . x = np.arange(0, 12, 0.4) ax1 = fig.add_subplot(211, aspect=&#39;equal&#39;) ax2 = fig.add_subplot(212, aspect=&#39;equal&#39;) ax1.set_xlim((x.min(), x.max())) ax2.set_xlim((x.min(), x.max())) ax1.set_ylim(-1, 3.5) ax2.set_ylim(-1, 3.5) ax1.set_xticklabels([]) ax1.set_yticks(np.arange(-1, 4)) ax2.set_yticks(np.arange(-1, 4)) def func(x, par0, par1, par2): return par0 + np.cos(par1 * x + par2) def add_rec(ax, c, v, col): ax.add_patch( patches.Rectangle( c, # (x,y) np.abs(v), # width v, # height alpha=0.4, color=col ) ) . Now let&#39;s plot some stuff . %matplotlib notebook # the parameter values par = (1, 2, 1) # generating data with noise y = func(x, *par) + (np.random.random(len(x)) - 0.5) ax1.plot(x, y, marker=&#39;o&#39;, ls=&#39;None&#39;, markerfacecolor=&quot;blue&quot;, markeredgecolor=&quot;black&quot;) ax2.plot(x, y, marker=&#39;o&#39;, ls=&#39;None&#39;, markerfacecolor=&quot;red&quot;, markeredgecolor=&quot;black&quot;) # best fit popt, pcov = curve_fit(func, x, y, p0=(1.5, 1.5, 2.5)) # p0 = initial guess p0, p1, p2 = popt # The total sum of squares (proportional to the variance of the data) SStot = ((y - y.mean()) ** 2).sum() # The sum of squares of residuals SSres = ((y - func(x, p0, p1, p2)) ** 2).sum() Rsquared = 1 - SSres / SStot # plot best fit h = np.linspace(x.min(), x.max(), 1001) fit, = ax1.plot(h, func(h, p0, p1, p2), color=&#39;black&#39;, linewidth=2) ax1.legend([fit], [&quot;Best fit&quot;], loc=&quot;upper right&quot;, frameon=False, handlelength=4) # plot mean mean, = ax2.plot(h, h * 0 + np.mean(y), ls=&#39;--&#39;, color=&#39;black&#39;, linewidth=2) ax2.legend([mean], [&quot;Mean&quot;], loc=&quot;upper right&quot;, frameon=False, handlelength=4) # plot blue and red squares for ind in np.arange(len(x)): x0 = x[ind] y0 = y[ind] # print(x0,y0) v1 = y0 - func(x0, p0, p1, p2) v2 = y0 - y.mean() add_rec(ax1, (x0, y0), -v1, &quot;blue&quot;) add_rec(ax2, (x0, y0), -v2, &quot;red&quot;) ax2.text(0.5, 2.7, r&quot;Total sum of squares: {:.1f}&quot;.format(SStot)) ax1.text(0.5, 2.7, r&quot;Sum of squares of residuals: {:.1f}&quot;.format(SSres)) ax2.set_xlabel( r&quot;R-squared = $1 - displaystyle frac{ text{blue area}}{ text{red area}}$ = &quot; + &quot;{:.2f}&quot;.format(Rsquared)) ax1.set_xlabel( r&quot;Data: $f(x) = p_0 + cos(p_1 x + p_2)+ $ noise &quot;) ax1.xaxis.set_label_position(&quot;top&quot;) fig.savefig(&quot;./python_figures/least-squares.png&quot;,dpi=300) fig .",
            "url": "https://yairmau.com/jupyter/2020/01/01/leastsquares.html",
            "relUrl": "/jupyter/2020/01/01/leastsquares.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fun with histograms",
            "content": ". Introduction . This code produces the figure above. I tried to showcase a few things one can do with 1d and 2d histograms. . The code . import matplotlib.pyplot as plt import numpy as np import matplotlib.gridspec as gridspec import scipy.special from scipy.optimize import curve_fit . make graph look pretty . # http://wiki.scipy.org/Cookbook/Matplotlib/LaTeX_Examples # this is a latex constant, don&#39;t change it. pts_per_inch = 72.27 # write &quot; the textwidth&quot; (or &quot; showthe columnwidth&quot; for a 2 collumn text) text_width_in_pts = 450.0 # inside a figure environment in latex, the result will be on the # dvi/pdf next to the figure. See url above. text_width_in_inches = text_width_in_pts / pts_per_inch # make rectangles with a nice proportion golden_ratio = 0.618 # figure.png or figure.eps will be intentionally larger, because it is prettier inverse_latex_scale = 2 # when compiling latex code, use # includegraphics[scale=(1/inverse_latex_scale)]{figure} # we want the figure to occupy 2/3 (for example) of the text width fig_proportion = (3.0 / 3.0) csize = inverse_latex_scale * fig_proportion * text_width_in_inches # always 1.0 on the first argument fig_size = (1.0 * csize, 0.5 * csize) # find out the fontsize of your latex text, and put it here text_size = inverse_latex_scale * 12 label_size = inverse_latex_scale * 10 tick_size = inverse_latex_scale * 8 # learn how to configure: # http://matplotlib.sourceforge.net/users/customizing.html params = {&#39;backend&#39;: &#39;ps&#39;, &#39;axes.labelsize&#39;: 16, &#39;legend.fontsize&#39;: tick_size, &#39;legend.handlelength&#39;: 2.5, &#39;legend.borderaxespad&#39;: 0, &#39;axes.labelsize&#39;: label_size, &#39;xtick.labelsize&#39;: tick_size, &#39;ytick.labelsize&#39;: tick_size, &#39;font.family&#39;: &#39;serif&#39;, &#39;font.size&#39;: text_size, # &#39;font.serif&#39;: [&#39;Computer Modern Roman&#39;], &#39;ps.usedistiller&#39;: &#39;xpdf&#39;, &#39;text.usetex&#39;: True, &#39;figure.figsize&#39;: fig_size, } plt.rcParams.update(params) plt.ioff() fig = plt.figure(1, figsize=fig_size) # figsize accepts only inches. . Panels on the left of the figure . gs = gridspec.GridSpec(2, 2, width_ratios=[1, 0.2], height_ratios=[0.2, 1]) gs.update(left=0.05, right=0.50, top=0.95, bottom=0.10, hspace=0.02, wspace=0.02) sigma = 1.0 # standard deviation (spread) mu = 0.0 # mean (center) of the distribution x = np.random.normal(loc=mu, scale=sigma, size=5000) k = 2.0 # shape theta = 1.0 # scale y = np.random.gamma(shape=k, scale=theta, size=5000) # bottom left panel ax10 = plt.subplot(gs[1, 0]) counts, xedges, yedges, image = ax10.hist2d(x, y, bins=40, cmap=&quot;YlOrRd&quot;, density=True) dx = xedges[1] - xedges[0] dy = yedges[1] - yedges[0] xvec = xedges[:-1] + dx / 2 yvec = yedges[:-1] + dy / 2 ax10.set_xlabel(r&quot;$x$&quot;) ax10.set_ylabel(r&quot;$y$&quot;, rotation=&quot;horizontal&quot;) ax10.text(-2, 8, r&quot;$p(x,y)$&quot;) ax10.set_xlim([xedges.min(), xedges.max()]) ax10.set_ylim([yedges.min(), yedges.max()]) # top left panel ax00 = plt.subplot(gs[0, 0]) gaussian = (1.0 / np.sqrt(2.0 * np.pi * sigma ** 2)) * np.exp(-((xvec - mu) ** 2) / (2.0 * sigma ** 2)) xdist = counts.sum(axis=1) * dy ax00.bar(xvec, xdist, width=dx, fill=False, edgecolor=&#39;black&#39;, alpha=0.8) ax00.plot(xvec, gaussian, color=&#39;black&#39;) ax00.set_xlim([xedges.min(), xedges.max()]) ax00.set_xticklabels([]) ax00.set_yticks([]) ax00.set_xlabel(&quot;Normal distribution&quot;, fontsize=16) ax00.xaxis.set_label_position(&quot;top&quot;) ax00.set_ylabel(r&quot;$p(x)$&quot;, rotation=&quot;horizontal&quot;, labelpad=20) # bottom right panel ax11 = plt.subplot(gs[1, 1]) gamma_dist = yvec ** (k - 1.0) * np.exp(-yvec / theta) / (theta ** k * scipy.special.gamma(k)) ydist = counts.sum(axis=0) * dx ax11.barh(yvec, ydist, height=dy, fill=False, edgecolor=&#39;black&#39;, alpha=0.8) ax11.plot(gamma_dist, yvec, color=&#39;black&#39;) ax11.set_ylim([yedges.min(), yedges.max()]) ax11.set_xticks([]) ax11.set_yticklabels([]) ax11.set_ylabel(&quot;Gamma distribution&quot;, fontsize=16) ax11.yaxis.set_label_position(&quot;right&quot;) ax11.set_xlabel(r&quot;$p(y)$&quot;) ax11.xaxis.set_label_position(&quot;top&quot;) . Panels on the right of the figure . gs2 = gridspec.GridSpec(2, 1, width_ratios=[1], height_ratios=[1, 1]) gs2.update(left=0.60, right=0.98, top=0.95, bottom=0.10, hspace=0.02, wspace=0.05) x = np.random.normal(loc=0, scale=1, size=1000) y = np.random.gamma(shape=2, size=1000) bx10 = plt.subplot(gs2[1, 0]) bx00 = plt.subplot(gs2[0, 0]) N = 100 a = np.random.gamma(shape=5, size=N) my_bins = np.arange(0,15,1.5) n1, bins1, patches1 = bx00.hist(a, bins=my_bins, density=True, histtype=&#39;stepfilled&#39;, alpha=0.2, hatch=&#39;/&#39;) bx00.set_xlim([0, 15]) bx00.set_ylim([0, 0.28]) bx00.set_xticklabels([]) bx00.set_xlabel(r&quot; texttt{plt.hist}&quot;) bx00.xaxis.set_label_position(&quot;top&quot;) # the following way is equivalent to plt.hist, but it gives # the user more flexibility when plotting and analysing the results n2, bins2 = np.histogram(a, bins=my_bins, density=True) wid = bins2[1] - bins2[0] red, = bx10.plot(bins2[:-1]+wid/2, n2, marker=&#39;o&#39;, color=&#39;red&#39;) bx10.bar(bins2[:-1], n2, width=wid, fill=False, edgecolor=&#39;black&#39;, linewidth=3, alpha=0.8, align=&quot;edge&quot;) bx10.set_xlim([0, 15]) bx10.set_ylim([0, 0.28]) bx10.set_xlabel(r&quot; texttt{np.histogram}; quad texttt{plt.bar}&quot;) . Text(0.5, 0, &#39; texttt{np.histogram}; quad texttt{plt.bar}&#39;) . best fit . xdata = my_bins[:-1] + wid/2 ydata = n2 def func(x, p1, p2): return x ** (p1 - 1.0) * np.exp(-x / p2) / (p2 ** p1 * scipy.special.gamma(p1)) popt, pcov = curve_fit(func, xdata, ydata, p0=(1.5, 1.5)) # p0 = initial guess p1, p2 = popt SStot = ((ydata - ydata.mean()) ** 2).sum() SSres = ((ydata - func(xdata, p1, p2)) ** 1).sum() Rsquared = 1 - SSres / SStot h = np.linspace(0,15,101) bx00.plot(h, func(h, p1, p2), color=&#39;blue&#39;, linewidth=2) # dummy plot, just so we can have a legend on the bottom panel blue, = ax10.plot([100],[100], color=&#39;blue&#39;, linewidth=2, label=&quot;Best fit&quot;) bx10.legend([red,blue],[r&#39;Data&#39;,r&#39;Best fit, $r^2=${:.2f}&#39;.format(Rsquared)], loc=&#39;upper right&#39;, frameon=False, handlelength=4, markerfirst=False, numpoints=3) . /Users/yairmau/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: RuntimeWarning: invalid value encountered in double_scalars after removing the cwd from sys.path. . &lt;matplotlib.legend.Legend at 0x7fde860d7ed0&gt; . fig.savefig(&quot;./python_figures/histograms.png&quot;,dpi=300) fig .",
            "url": "https://yairmau.com/jupyter/2020/01/01/histograms.html",
            "relUrl": "/jupyter/2020/01/01/histograms.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Conway's Game of Life",
            "content": ". Introduction . This is a (slightly) modified version of Glowing Python&#39;s code. I make it available here because it features a few nice things: . how to make a movie using matplotlib.animation | how to write a generator (function with yield) | how to plot a sparce array (spy) | . The code . import numpy as np from matplotlib import pyplot as plt import matplotlib.animation as manimation def life(X, steps): &quot;&quot;&quot; Conway&#39;s Game of Life. - X, matrix with the initial state of the game. - steps, number of generations. &quot;&quot;&quot; def roll_it(x, y): # rolls the matrix X in a given direction # x=1, y=0 left; x=-1, y=0 right; return np.roll(np.roll(X, y, axis=0), x, axis=1) for _ in range(steps): # count the number of neighbours # the universe is considered toroidal Y = roll_it(1, 0) + roll_it(0, 1) + roll_it(-1, 0) + roll_it(0, -1) + roll_it(1, 1) + roll_it(-1, -1) + roll_it(1, -1) + roll_it(-1, 1) # game of life rules X = np.logical_or(np.logical_and(X, Y == 2), Y == 3) X = X.astype(int) yield X . dimensions = (90, 160) # height, width X = np.zeros(dimensions) # Y by X dead cells middle_y = dimensions[0] / 2 middle_x = dimensions[1] / 2 N_iterations = 600 # acorn initial condition # http://www.conwaylife.com/w/index.php?title=Acorn X[middle_y, middle_x:middle_x+2] = 1 X[middle_y, middle_x+4:middle_x+7] = 1 X[middle_y+1, middle_x+3] = 1 X[middle_y+2, middle_x+1] = 1 . FFMpegWriter = manimation.writers[&#39;ffmpeg&#39;] metadata = dict(title=&#39;Game of life&#39;, artist=&#39;Acorn initial condition&#39;) writer = FFMpegWriter(fps=10, metadata=metadata) fig = plt.figure() fig.patch.set_facecolor(&#39;black&#39;) with writer.saving(fig, &quot;game_of_life.mp4&quot;, 300): # last argument: dpi plt.spy(X, origin=&#39;lower&#39;) plt.axis(&#39;off&#39;) writer.grab_frame() plt.clf() for i, x in enumerate(life(X, N_iterations)): plt.title(&quot;iteration: {:03d}&quot;.format(i + 1)) plt.spy(x, origin=&#39;lower&#39;) plt.axis(&#39;off&#39;) writer.grab_frame() plt.clf() .",
            "url": "https://yairmau.com/jupyter/2020/01/01/gol.html",
            "relUrl": "/jupyter/2020/01/01/gol.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fitzhugh-Nagumo Equation",
            "content": ". Introduction . We simulate the Fitzhugh-Nagumo equations $$ u_t = u - u^3 - v + nabla^2 u v_t = epsilon(u - a_1 v - a_0) + delta nabla^2 v, $$ using the semi-spectral time integration method. . This simultation was heavily inspired by Aric Hagberg&#39;s simulation in &quot;From Labyrinthine Patterns to Spiral Turbulence&quot;, PRL 1994. . The code below provides 3 initial conditions, &quot;squiggle, blocks, and random&quot;. For time integration, besides the spectral method, we also provide the Euler method. Details about the semi-spectral method can be found after the code. . Parameters: $ epsilon=0.3$, $ delta=2.0$, $a_1=1.4$, and $a_0=0$. . Other simulations and Python examples can be found on my website: yairmau.com. . The code . import packages . import numpy as np import matplotlib.pyplot as plt import os from matplotlib import rcParams rcParams[&#39;font.family&#39;] = &#39;monospace&#39; . define class with all the methods . class FitzHughNagumo(object): def __init__(self, epsilon=0.3, delta=2.0, a1=1.4, a0=0.0, n=(256, 256), l=(400, 400), start=0.0, step=1.0, finish=2000.0, dt=0.1, integration_type=&quot;spectral&quot;): self.epsilon = epsilon self.delta = delta self.a1 = a1 self.a0 = a0 self.n = n self.l = l self.start = start self.step = step self.finish = finish self.dt = dt self.integration_type = integration_type self.rhs_a = np.zeros((2, self.n[0], self.n[1])) def spectral_multiplier(self): dx = float(self.l[0]) / self.n[0] dy = float(self.l[1]) / self.n[1] # wave numbers fx = 2.0 * np.pi * np.fft.fftfreq(self.n[0], dx) fy = 2.0 * np.pi * np.fft.fftfreq(self.n[1], dy) kx = np.outer(fx, np.ones(self.n[0])) ky = np.outer(np.ones(self.n[1]), fy) # multiplier mult_a = np.zeros((2, self.n[0], self.n[1])) mult_a[0] = np.exp(-(kx ** 2 + ky ** 2) * self.dt) # u mult_a[1] = np.exp(-self.delta * (kx ** 2 + ky ** 2) * self.dt) # v return mult_a def rhs_reaction(self, a): u = a[0] # alias v = a[1] # alias # FHN right hand side self.rhs_a[0] = u - u ** 3 - v self.rhs_a[1] = self.epsilon * (u - self.a1 * v - self.a0) return self.rhs_a def rhs_euler(self, a): # boundary conditions in laplacian laplacian = self.periodic_laplacian u = a[0] # alias v = a[1] # alias dx = float(self.l[0]) / self.n[0] # FHN right hand side self.rhs_a[0] = u - u ** 3 - v + laplacian(u, dx=dx) self.rhs_a[1] = self.epsilon * (u - self.a1 * v - self.a0) + self.delta * laplacian(v, dx=dx) return self.rhs_a def draw(self, a, t): u = a[0] self.im = plt.imshow(u.real, cmap=&quot;Greys_r&quot;, origin=&#39;lower&#39;, vmin=-0.534522, vmax=0.534522, interpolation=&quot;gaussian&quot;) self.title = plt.title(&#39;time = {:&gt;4.0f}&#39;.format(0)) plt.xticks([]) plt.yticks([]) self.im.figure.canvas.draw() def draw_update(self, a, t): u = a[0] self.title.set_text(&#39;time = {:&gt;4.0f}&#39;.format(t)) self.im.set_data(u.real) self.im.figure.canvas.draw() def save_frame(self, i): fname = &quot;_tmp{:05d}.png&quot;.format(i) self.frame_names.append(fname) self.fig.savefig(fname, bbox_inches=&#39;tight&#39;, dpi=300) def periodic_laplacian(self, u, dx=1): &quot;&quot;&quot;Return finite difference Laplacian approximation of 2d array. Uses periodic boundary conditions and a 2nd order approximation.&quot;&quot;&quot; laplacian = (np.roll(u, -1, axis=0) + np.roll(u, +1, axis=0) + np.roll(u, -1, axis=1) + np.roll(u, +1, axis=1) - 4.0 * u) / (dx ** 2) return laplacian def random_ic(self): return 0.5 * (np.random.random((2, self.n[0], self.n[1])) - 0.5) def blocks_ic(self): a = np.ones((2, self.n[0], self.n[1])) a[0] = 0.534522 a[1] = 0.381802 n = self.n p = n[0] / 8 a[0][3 * p - 4:3 * p + 4, 5 * p - 4:5 * p + 4] = -0.534522 a[0][6 * p - 4:6 * p + 4, 3 * p - 4:3 * p + 4] = -0.534522 return a def squiggle_ic(self): a = np.ones((2, self.n[0], self.n[1])) l = self.l uplus = 0.534522 vplus = 0.381802 uminus = -uplus X, Y = np.meshgrid(np.linspace(0, self.l[0], self.n[0]), np.linspace(0, self.l[0], self.n[0])) cos_term = 0.05 * l[0] * np.sin(10 * (2 * np.pi) * Y / l[1] + np.pi * 0.3) exp_term = np.exp(-((Y - l[1] / 2) / (0.1 * l[1])) ** 2) width = 0.05 * l[0] Z = np.exp(-((X - l[0] / 2 + cos_term * exp_term) / width) ** 2) a[0] = uplus a[1] = vplus a[0][Z &gt; 0.8] = uminus return a . run simulation, save snapshots . plt.ion() plt.clf() foo = FitzHughNagumo() foo.fig = plt.figure(1) ax = foo.fig.add_subplot(111) a = foo.squiggle_ic() mult_a = foo.spectral_multiplier() fft_a = np.fft.fftn(a, axes=(1, 2)) t = foo.start foo.draw(a, t) foo.frame_names = [] foo.save_frame(0) for i, tout in enumerate(np.arange(foo.start + foo.step, foo.finish + foo.step, foo.step)): while t &lt; tout: if foo.integration_type == &quot;spectral&quot;: rhs_a = foo.rhs_reaction(a) fft_a = mult_a * (fft_a + foo.dt * np.fft.fftn(rhs_a, axes=(1, 2))) a = np.fft.ifftn(fft_a, axes=(1, 2)) if foo.integration_type == &quot;euler&quot;: a = a + foo.dt * foo.rhs_euler(a) t += foo.dt foo.draw_update(a, t) foo.save_frame(i + 1) . make movie, delete snapshots . fps = 24 frames = &quot;_tmp%5d.png&quot; movie_command = &quot;ffmpeg -y -r {:} -i {:} fhn.mp4&quot;.format(fps, frames) os.system(movie_command) for fname in foo.frame_names: os.remove(fname) . The semi-spectral method . The explanation below was taken from my thesis: &quot;Pattern Formation in Spatially Forced Systems: Application to Vegetation Restoration&quot;. . The semi-spectral method is extremely useful when working with reaction-diffusion systems, and with parabolic PDEs in general. This was the method used to run all the simulations of the Swift-Hohenberg model in this thesis, and it proved to be reliable and fast. The explanation below is a summary of &quot;Spectral algorithms for reaction-diffusion equations&quot;, by Richard V. Craster and Roberto Sassi, with a step by step recipe, so the reader can easily apply the method to any suitable problem. . the method . The semi-spectral transform method is very useful when we have to integrate a system that evolves really slowly. Let us say we have a (parabolic) system of the form: $$ begin{equation*} u_t= epsilon u + f(u)+D nabla^2u, label{eq:1} tag{1} end{equation*} $$ . where $f(u)$ is a nonlinear function. First, we compute the Fourier transform of eqref{eq:1}: $$ begin{equation*} hat{u}_t= epsilon hat{u} + hat{f}(u)-k^2D hat{u}, label{eq:2} tag{2} end{equation*} $$ where the hat denotes the Fourier transform. . We rearrange eqref{eq:2} in the following way: $$ begin{equation*} hat{u}_t+a hat{u}= hat{f}(u), label{eq:3} tag{3} end{equation*} $$ where $a=- epsilon +k^2D$, and now we make a variable substitution $$ begin{align*} hat{v}(k,t)&amp;= ; hat{u}(k,t) ,e^{at} label{eq:4a} tag{4a} hat{v}_t&amp;= ; hat{u}_te^{at}+a hat{u} ,e^{at}. label{eq:4b} tag{4b} end{align*} $$ . We multiply eqref{eq:3} by $e^{at}$ and we finally get $$ begin{equation*} hat{v}_t=e^{at} hat{f}(u). label{eq:5} tag{5} end{equation*} $$ . We can now advance $ hat{v}$ in time using a simple Euler step $$ begin{equation*} hat{v}^{t_{n+1}}= hat{v}^{t_n}+ Delta t left( e^{at_n} hat{f}(u) right). label{eq:6} tag{6} end{equation*} $$ . What we really want is $ hat{u}$, which, according to eqref{eq:4a}, is given by . $$ begin{align*} displaystyle hat{u}^{t_{n+1}}=&amp; ; hat{v}^{t_{n+1}}e^{-at_{n+1}} label{eq:7a} tag{7a} =&amp; ; hat{v}^{t_{n+1}}e^{-at_{n}}e^{-a Delta t} label{eq:7b} tag{7b} =&amp; ; left( hat{v}^{t_n}+ Delta t ; e^{a t_n} hat{f}(u) right)e^{-at_{n}}e^{-a Delta t} label{eq:7c} tag{7c} =&amp; ; left( hat{v}^{t_n}e^{-at_{n}}+ Delta t ;{e^{a t_n}} hat{f}(u) {e^{-at_{n}}} right)e^{-a Delta t} label{eq:7d} tag{7d} =&amp; ; left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{-a Delta t} label{eq:7e} tag{7e}. end{align*} $$There is actually no need to use the variable substitution in eqref{eq:4a}. We now have an expression for $ hat{u}^{t_{n+1}}$: $$ begin{equation*} hat{u}^{t_{n+1}}= left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{-a Delta t}. label{eq:8} tag{8} end{equation*} $$ . Now it is time to go back from the Fourier space to the real space, and for that we use an inverse Fourier transform $$ u^{t_{n+1}}= mathcal{F}^{-1}[ hat{u}^{t_{n+1}}]. label{eq:9} tag{9} $$ . step by step . To implement this technique, one just has to follow the steps below: . Calculate the Fourier transform of $u$: $ hat{u}= mathcal{F}[u]$. | Have $f(u)$ calculated and then take its Fourier transform: $ hat{f}(u)= mathcal{F}[f(u)]$. | For a given lattice with $N$ points, and $ delta x$ being the distance between them, make the frequency bin vector (matrix) $k$ for your one (two) dimensional system. In python the command would benumpy.fft.fftfreq(N, dx). . The frequency bin vector $k$ looks like: | . $$ begin{align} k&amp;=2 pi cdot left[ 0,1, cdots, tfrac{N}{2}-1,- tfrac{N}{2}, cdots,-1 right]/(N , delta x), qquad mbox{if N is even;} label{eq:10a} tag{10a} k&amp;=2 pi cdot left[ 0,1, cdots, tfrac{N-1}{2},- tfrac{N-1}{2}, cdots,-1 right]/(N , delta x), qquad mbox{if N is odd.} label{eq:10b} tag{10b} end{align} $$Remember that the domain size is given by $L=N , delta x$, which means that the denominator in the expressions above can be written simply as $L$. It is clear from that fact that $ delta k$, the tiniest slice of the Fourier space is $ delta k=2 pi/L$. Corollary: if you want to divide the Fourier space into very many parts, simply have a huge domain. If the system is two-dimensional, then have $k_x$ and $k_y$ calculated separately. The domain might not be square ($L_x neq L_y$), and you might want to divide the domain into a different number of points ($N_x neq N_y$). Anyway, prepare one-dimensional arrays of $k_x$ and $k_y$ as explained above, and then make an outer product of these arrays with a ones array of length $N$, as following: . $$ k_{x,2d} = begin{pmatrix} 1 1 vdots 1 end{pmatrix} begin{pmatrix} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} end{pmatrix} = begin{pmatrix} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} &amp; vdots &amp; &amp; k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} end{pmatrix} label{eq:11} tag{11} $$and . $$ k_{y,2d} = begin{pmatrix} k_{x1} k_{x2} vdots k_{xN} end{pmatrix} begin{pmatrix} 1 &amp; 1 &amp; ... &amp; 1 end{pmatrix} = begin{pmatrix} k_{y1} &amp; k_{y1} &amp; &amp; k_{y1} k_{y2} &amp; k_{y2} &amp; ... &amp; k_{y2} vdots &amp; vdots &amp; &amp; vdots k_{yN} &amp; k_{yN} &amp; &amp; k_{yN} end{pmatrix}. label{eq:12} tag{12} $$Then factor $e^{-a Delta t}$ equals . $$ e^{-a Delta t}= e^{ left[ epsilon-D(k_x^2+k_y^2) right] Delta t}, label{eq:13} tag{13} $$where $k_x^2$ is the element-wise exponentiation of the 2d array $k_{x,2d}$. . Now that we have all the factors we need, we simply calculate $$ hat{u}^{t_{n+1}}= left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{ left[ epsilon-D(k_x^2+k_y^2) right] Delta t}. label{eq:14} tag{14} $$ | We finally go back to the real space by applying the inverse Fourier transform: $u^{t_{n+1}}= mathcal{F}^{-1}[ hat{u}^{t_{n+1}}]$. | . example . For the parametrically forced Swift-Hohenberg equation $$ frac{ partial u}{ partial t} = [ epsilon + gamma cos(k_f x)]u - u^3 -( nabla^2+k_0^2)^2 u, label{eq:15} tag{15} $$ we have $$ f(u)= -u^3 + gamma u cos(k_f x), qquad a = epsilon - left(k_0- k_x^2 - k_y^2 right)^2. label{eq:16} tag{16} $$ .",
            "url": "https://yairmau.com/jupyter/2020/01/01/fhn.html",
            "relUrl": "/jupyter/2020/01/01/fhn.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Bar plot",
            "content": ". Introduction . This code produces the figure above. Here we showcase the use of unicode text. . The code . from __future__ import unicode_literals import numpy as np import matplotlib import matplotlib.pyplot as plt from bidi import algorithm as bidialg # needed for arabic, hebrew import arabic_reshaper # needed for arabic . # http://wiki.scipy.org/Cookbook/Matplotlib/LaTeX_Examples pts_per_inch = 72.27 # this is a latex constant, don&#39;t change it. text_width_in_pts = 300.0 # write &quot; the textwidth&quot; (or &quot; showthe columnwidth&quot; for a 2 collumn text) # inside a figure environment in latex, the result will be on the dvi/pdf next to the figure. See url above. text_width_in_inches=text_width_in_pts/pts_per_inch golden_ratio = 0.618 # make rectangles with a nice proportion inverse_latex_scale = 2 # figure.png or figure.eps will be intentionally larger, because it is prettier # when compiling latex code, use includegraphics[scale=(1/inverse_latex_scale)]{figure} fig_proportion = (3.0 / 3.0) # we want the figure to occupy 2/3 (for example) of the text width csize = inverse_latex_scale * fig_proportion * text_width_in_inches fig_size = (1 * csize, 1.3 * csize) # always 1.0 on the first argument text_size = inverse_latex_scale * 10 # find out the fontsize of your latex text, and put it here label_size = inverse_latex_scale * 10 tick_size = inverse_latex_scale * 8 # learn how to configure: # http://matplotlib.sourceforge.net/users/customizing.html params = {&#39;backend&#39;: &#39;ps&#39;, &#39;axes.labelsize&#39;: 16, &#39;legend.fontsize&#39;: 14, &#39;legend.handlelength&#39;: 2.5, &#39;legend.borderaxespad&#39;: 0, &#39;axes.labelsize&#39;: label_size, &#39;xtick.labelsize&#39;: tick_size, &#39;ytick.labelsize&#39;: tick_size, # &#39;font.family&#39;: &#39;serif&#39;, &#39;font.size&#39;: text_size, # &#39;font.serif&#39;: [&#39;Computer Modern Roman&#39;], &#39;ps.usedistiller&#39;: &#39;xpdf&#39;, # &#39;text.usetex&#39;: True, &#39;figure.figsize&#39;: fig_size, #&#39;text.latex.unicode&#39;: True, } plt.rcParams.update(params) plt.ioff() fig = plt.figure(1, figsize=fig_size) # figsize accepts only inches. fig.clf() dpi = 100 pixel_size = (700,700) fig_size = (pixel_size[0]/dpi,pixel_size[1]/dpi) ax1=fig.add_subplot(211) ax2=fig.add_subplot(212) fig.subplots_adjust(left=0.30, right=0.97, top=0.95, bottom=0.06, hspace=0.2, wspace=0.1) . words = [u&#39;Fußball Ångström nsøster Россия&#39;, u&#39;français maître nvoilà égoïste&#39;, u&#39;España&#39;, u&#39;İstanbul ağzı&#39;, u&#39;Anything Unicode&#39; ] values1 = [2575, 5851, 3191, 2303, 3029] values2 = [4813, 5219, 5505, 6229, 6961] values1 = np.array(values1) values2 = np.array(values2) width = 0.35 # the width of the bars r = np.arange(len(values1)) . ax1 , horizontal bars . v1 = ax1.barh(r, values1, width, color=&#39;pink&#39;) v2 = ax1.barh(r + width, values2, width, color=&#39;brown&#39;) ax1.axis([0, 8600, r.min() - 0.3, r.max() + 1]) ax1.set_yticks(r) ax1.set_yticks(r + 1 * width) ax1.set_yticklabels(words) xt = np.arange(0, 8100, 1000) ax1.set_xticks(xt) ax1.set_xticklabels(xt) ax1.set_xlabel(u&#39;the values&#39;, fontsize=16) ax1.set_title(u&#39;Title here&#39;, fontsize=18) ax1.xaxis.grid(True) ax1.tick_params( axis=&#39;y&#39;, # changes apply to the y-axis which=&#39;both&#39;, # both major and minor ticks are affected left=&#39;off&#39;, # ticks along the left edge are off right=&#39;off&#39;, # ticks along the right edge are off labelleft=&#39;on&#39;) # labels along the bottom edge are on ax1.legend((v1, v2), (u&#39;2016&#39;, u&#39;2015&#39;), loc=(0.74,0.05)) def autolabel_hor(rects,ax, offset_x, offset_y): # attach some text labels at the tip of the bars for i,rect in enumerate(rects): width = rect.get_width() height = rect.get_height() ax.text(width + offset_x, rect.get_y() + offset_y * height, &#39;%d&#39; % int(width), ha=&#39;left&#39;, va=&#39;bottom&#39;, fontsize=14) autolabel_hor(v1, ax1, 100.0, -0.20) autolabel_hor(v2, ax1, 100.0, -0.10) . ax2, vertical bars . from bidi import algorithm as bidialg w1 = ax2.bar(r, values1, width, color=&#39;pink&#39;) w2 = ax2.bar(r + width, values2, width, color=&#39;brown&#39;) ax2.axis([r.min() - 0.3, r.max() + 1, 0, 8600]) ax2.set_xticks(r) ax2.set_xticks(r + 1 * width) shalom = bidialg.get_display(u&#39;שלום&#39;) salam = bidialg.get_display(arabic_reshaper.reshape(u&#39;سلام&#39;)) ax2.set_xticklabels([shalom, salam, &#39;ccc&#39;, &#39;ddd&#39;, &#39;eee&#39;]) xt = np.arange(0, 8200, 1000) ax2.set_yticks(xt) ax2.set_yticklabels(xt) ax2.yaxis.grid(True) ax2.tick_params( axis=&#39;x&#39;, # changes apply to the x-axis which=&#39;both&#39;, # both major and minor ticks are affected top=&#39;off&#39;, # ticks along the top edge are off bottom=&#39;off&#39;, # ticks along the bottom edge are off labelbottom=&#39;on&#39;) # labels along the bottom edge are on ax2.legend((w1, w2), (u&#39;2016&#39;, u&#39;2015&#39;), loc=&quot;upper center&quot;) def autolabel_ver(rects,ax, offset_x, offset_y): # attach some text labels at the tip of the bars for i,rect in enumerate(rects): width = rect.get_width() height = rect.get_height() ax.text(rect.get_x() + offset_x * width, height + offset_y, &#39;%d&#39; % int(height), ha=&#39;left&#39;, va=&#39;bottom&#39;, fontsize=14) autolabel_ver(w1, ax2, -0.3, 100.0) autolabel_ver(w2, ax2, 0., 100.0) . %matplotlib inline fig.savefig(&quot;./python_figures/bars.png&quot;) plt.show() fig .",
            "url": "https://yairmau.com/jupyter/2020/01/01/bars.html",
            "relUrl": "/jupyter/2020/01/01/bars.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "",
          "content": "Senior Lecturer [Assistant Professor] The Hebrew University of Jerusalem The Department of Soil and Water Sciences Robert H. Smith Faculty of Agriculture, Food and Environment . About . I’m interested in the interactions between soil, water and vegetation in drylands, in both natural and agricultural ecosystems. Our goal is to understand how the basic processes and feedbacks influence the ecosystem dynamics, and how this knowledge can be used to control those systems. . The common theme between my different research projects is land/ecosystem degradation caused by human activity. . Our research is based on “simple” mathematical models, that strive to capture the essential physical processes, while providing deep insight into the dynamics of the system. Some of the tools we use in the modeling of environmental questions come from dynamical systems, statistical physics and optimal control theory. . [Read more on current research projects…] . I love to write code, and I made available on the Tutorials page some working examples in Python and LaTeX. Check it out! . How to find me .   yair.mau@mail.huji.ac.il   +972 8 948 9386   Rehovot Campus, Lubell building, office 19. Map here . Google Scholar Check out my CV . . Piet Hein Problems worthy   of attack prove their worth   by hitting back. .",
          "url": "https://yairmau.com/inde_old.html",
          "relUrl": "/inde_old.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "More",
          "content": "More . . Tools I recommend . Quotes . Teaching . Science Communication . Five-star Content . Blog .",
          "url": "https://yairmau.com/more/",
          "relUrl": "/more/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Tools",
          "content": "Tools . . /home/more/tools . Programming . Anaconda . “The easiest way to perform Python/R data science and machine learning on Linux, Windows, and Mac OS X.” . Sublime Text . “Sublime Text is a sophisticated text editor for code, markup and prose.” . Jupyter Notebook . “The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text.” . CodeCademy . “Learn to code interactively, for free.” . Documents . PDFtk . “Use PDFtk Pro to quickly split, merge, rotate, watermark, stamp and secure PDF pages and documents” Command line version (powerful, see examples); friendly graphical tool for Windows. . Overleaf . “An online LaTeX editor that’s easy to use.” By the way, Overleaf has the best LaTeX tutorials out there. Check it out. Also, see this excellent WikiBook on LaTeX. . BRISS . “A simple cross-platform (Linux, Windows, Mac OSX) application for cropping PDF files” . Data . Figshare . “Figshare is an online digital repository where researchers can preserve and share their research outputs, including figures, datasets, images, and videos.” . BitBucket . “Bitbucket is a web-based hosting service for projects that use Git revision control systems.” . WebPlotDigitizer . “Extract data from plots, images, and maps.” . $ rightarrow LaTeX$ . doi2bib . “Give us a DOI and we’ll do our best to get you the BibTeX entry.” . Tables Generator . “Quickly create even complex LaTeX tables online with our generator – cells merging is supported together with borders editing.” .",
          "url": "https://yairmau.com/more/tools/",
          "relUrl": "/more/tools/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Quotes",
          "content": "Quotes . . The scientist is not a person who gives the right answers, he’s one who asks the right questions. Claude Lévi-Strauss . | The most exciting phrase to hear in science, the one that heralds new discoveries, is not ‘Eureka!’ (I found it!) but ‘That’s funny…’ Isaac Asimov . | In theory, there is no difference between theory and practice. But, in practice, there is. Jan L. A. van de Snepscheut . | Contrary to what Asimov says, the most exciting phrase in science, the one that heralds new discoveries, is not ‘Eureka!’ or ‘That’s funny…,’ it’s ‘Your research grant has been approved.’ John Alejandro King . | A theory is something nobody believes, except the person who made it. An experiment is something everybody believes, except the person who made it. Attributed to Albert Einstein . | The purpose of models is not to fit the data but to sharpen the questions. Samuel Karlin . | Research is what I’m doing when I don’t know what I’m doing. Wernher von Braun . | Nothing is more practical than a good theory. Kurt Lewin . | Just as there are odors that dogs can smell and we cannot, as well as sounds that dogs can hear and we cannot, so too there are wavelengths of light we cannot see and flavors we cannot taste. Why then, given our brains wired the way they are, does the remark, “Perhaps there are thoughts we cannot think,” surprise you? Richard Hamming . | An expert is a person who has made all the mistakes that can be made in a very narrow field. Niels Bohr . | An expert is one who knows more and more about less and less until he knows absolutely everything about nothing. Nicholas Butler . | Essentially, all models are wrong, but some are useful. George E. P. Box . | Theory is when you know everything but nothing works. Praxis is when everything works but no one knows why. In our lab, theory and praxis are combined: nothing works and no one know why. Unknown . | The great tragedy of Science — the slaying of a beautiful hypothesis by an ugly fact. Thomas Henry Huxley . | So, in the face of overwhelming odds, I’m left with only one option, I’m gonna have to science the shit out of this. Mark Watney . | The fact that we live at the bottom of a deep gravity well, on the surface of a gas covered planet going around a nuclear fireball 90 million miles away and think this to be normal is obviously some indication of how skewed our perspective tends to be. Douglas Adams, The Salmon of Doubt: Hitchhiking the Galaxy One Last Time . | You’d be amazed how much research you can get done when you have no life whatsoever. Ernest Cline, Ready Player One . | When you have eliminated all which is impossible, then whatever remains, however improbable, must be the truth. Sherlock Holmes . | With four parameters I can fit an elephant, and with five I can make him wiggle his trunk. John von Neumann . | The purpose of computing is insight, not numbers. Richard Hamming . | The most important thing about an equation is all the quantities that don’t appear in it; once we know what the essentials are, figuring out how they depend on each other is often the easier part. Pedro Domingos, The Master Algorithm . | Thermodynamics is easy – I’ve learned it many times. Harvey S. Leff . | Far better an approximate answer to the right question, which is often vague, than an exact answer to the wrong question, which can always be made precise. John Tukey, The future of data analysis . | An article about computational result is advertising, not scholarship. The actual scholarship is the full software environment, code and data, that produced the result. Buckheit and Donoho (1995) . | ”Forty-two!” yelled Loonquawl. ”Is that all you’ve got to show for seven and a half million years’ work?” ”I checked it very thoroughly,” said the computer, ”and that quite definitely is the answer. I think the problem, to be quite honest with you, is that you’ve never actually known what the question is.” ”But it was the Great Question! The Ultimate Question of Life, the Universe and Everything!” howled Loonquawl. ”Yes,” said Deep Thought with the air of one who suffers fools gladly, ”but what actually is it?” A slow stupefied silence crept over the men as they stared at the computer and then at each other. ”Well, you know, it’s just Everything … Everything … ” offered Phouchg weakly. ”Exactly!” said Deep Thought. ”So once you do know what the question actually is, you’ll know what the answer means.” Douglas Adams, The Hitchiker’s Guide to the Galaxy . | Computers are useless. They can only give you answers. Pablo Picasso . | The true and only goal of science is to reveal unity rather than mechanism. Henri Poincaré . | One of the principal objects of theoretical research is to find the point of view from which the subject appears in the greatest simplicity. Josiah Willard Gibbs . | The future is already here — it’s just not very evenly distributed. William Gibson . | True science teaches, above all, to doubt and to be ignorant. Miguel de Unamuno . | If you are the smartest person in the room, then you are in the wrong room. Unknown . | Dividing one number by another is mere computation; knowing what to divide by what is mathematics. Jordan Ellenberg, How Not to Be Wrong: The Power of Mathematical Thinking . | I’ve been in this argument a thousand times. Won them all and convinced nobody. Amos Tversky, on the hot hand fallacy . | Mathematics is the extension of common sense by other means. Jordan Ellenberg, How Not to Be Wrong: The Power of Mathematical Thinking . | If I had more time, I would have written a shorter letter. Blaise Pascal . | I am going to give what I will call an elementary demonstration. But elementary does not mean easy to understand. Elementary means that very little is required to know ahead of time in order to understand it, except to have an infinite amount of intelligence. There may be a large number of steps that hard to follow, but to each does not require already knowing the calculus or Fourier transforms. Richard P. Feynman . | In this section a mathematical model of the growing embryo will be described. This model will be a simplification and an idealization, and consequently a falsification. It is to be hoped that the features retained for discussion are those of greatest importance in the present state of knowledge. Alan Turing, The Chemical Basis of Morphogenesis . | Problems worthy of attack prove their worth by hitting back. Piet Hein . | Art is solving problems that cannot be formulated before they have been solved. The shaping of the question is part of the answer. Piet Hein . | Physics is the simplest of all the sciences, and fundamental physics⁠⁠—the study of the basic pieces of reality at the deepest level⁠—is the simplest of all. Not “simple” in the sense that the homework problems are easy, but simple in the sense that Galileo’s trick of ignoring friction and air resistance makes our lives easier. The reason why physics classes seem so hard is not because physics is so hard—it’s because we understand so much of it that there’s a lot to learn, and that’s because it’s fundamentally pretty simple. Sean Carroll, The Big Picture . | Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better. Edsger W. Dijkstra . | The fundamental role of a teacher is not to deliver information. It is guide the social process of learning. The job of a teacher is to inspire, to challenge, to excite their students to want to learn. Yes, they also do explain and demonstrate and show things, but fundamentally that is beside the point. The most important thing a teacher does is make every student feel like they are important, to make them feel accountable for doing the work of learning. Derek Alexander Muller, https://youtu.be/GEmuEWjHr5c . | .",
          "url": "https://yairmau.com/more/quotes/",
          "relUrl": "/more/quotes/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "",
          "content": "Senior Lecturer [Assistant Professor] The Hebrew University of Jerusalem The Department of Soil and Water Sciences Robert H. Smith Faculty of Agriculture, Food and Environment . About . I’m interested in the interactions between soil, water and vegetation in drylands, in both natural and agricultural ecosystems. Our goal is to understand how the basic processes and feedbacks influence the ecosystem dynamics, and how this knowledge can be used to control those systems. . The common theme between my different research projects is land/ecosystem degradation caused by human activity. . Our research is based on “simple” mathematical models, that strive to capture the essential physical processes, while providing deep insight into the dynamics of the system. Some of the tools we use in the modeling of environmental questions come from dynamical systems, statistical physics and optimal control theory. . [Read more on current research projects…] . I love to write code, and I made available on the Tutorials page some working examples in Python and LaTeX. Check it out! . How to find me .   yair.mau@mail.huji.ac.il   +972 8 948 9386   Rehovot Campus, Lubell building, office 19. Map here . Google Scholar Check out my CV . . Piet Hein Problems worthy   of attack prove their worth   by hitting back. .",
          "url": "https://yairmau.com/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Publications",
          "content": "Publications . . Yair Mau and Amilcare Porporato. Optimal control solutions to sodic soil reclamation. Advances in Water Resources, 91:37–45, 2016. doi: 10.1016/j.advwatres.2016.02.014 Abstract   BibTeX   PDF . We study the reclamation process of a sodic soil by irrigation with water amended with calcium cations. In order to explore the entire range of time-dependent strategies, this task is framed as an optimal control problem, where the amendment rate is the control and the total rehabilitation time is the quantity to be minimized. We use a minimalist model of vertically averaged soil salinity and sodicity, in which the main feedback controlling the dynamics is the nonlinear coupling of soil water and exchange complex, given by the Gapon equation. We show that the optimal solution is a bang–bang control strategy, where the amendment rate is discontinuously switched along the process from a maximum value to zero. The solution enables a reduction in remediation time of about 50%, compared with the continuous use of good-quality irrigation water. Because of its general structure, the bang–bang solution is also shown to work for the reclamation of other soil conditions, such as saline–sodic soils. The novelty in our modeling approach is the capability of searching the entire “strategy space” for optimal time-dependent protocols. The optimal solutions found for the minimalist model can be then fine-tuned by experiments and numerical simulations, applicable to realistic conditions that include spatial variability and heterogeneities. @article{mau2016optimal,&nbsp;&nbsp; doi = {10.1016/j.advwatres.2016.02.014},&nbsp;&nbsp; year = {2016},&nbsp;&nbsp; publisher = {Elsevier {BV}},&nbsp;&nbsp; volume = {91},&nbsp;&nbsp; pages = {37--45},&nbsp;&nbsp; author = {Yair Mau and Amilcare Porporato},&nbsp;&nbsp; title = {Optimal control solutions to sodic soil reclamation},&nbsp;&nbsp; journal = {Advances in Water Resources}} Amilcare Porporato, Xue Feng, Stefano Manzoni, Yair Mau, Anthony J. Parolari, and Giulia Vico. Ecohydrological modeling in agroecosystems: Examples and challenges. Water Resources Research, 51(7):5081–5099, 2015. doi: 10.1002/2015WR017289 Abstract   BibTeX   PDF . Human societies are increasingly altering the water and biogeochemical cycles to both improve ecosystem productivity and reduce risks associated with the unpredictable variability of climatic drivers. These alterations, however, often cause large negative environmental consequences, raising the question as to how societies can ensure a sustainable use of natural resources for the future. Here we discuss how ecohydrological modeling may address these broad questions with special attention to agroecosystems. The challenges related to modeling the two-way interaction between society and environment are illustrated by means of a dynamical model in which soil and water quality supports the growth of human society but is also degraded by excessive pressure, leading to critical transitions and sustained societal growth-collapse cycles. We then focus on the coupled dynamics of soil water and solutes (nutrients or contaminants), emphasizing the modeling challenges, presented by the strong nonlinearities in the soil and plant system and the unpredictable hydroclimatic forcing, that need to be overcome to quantitatively analyze problems of soil water sustainability in both natural and agricultural ecosystems. We discuss applications of this framework to problems of irrigation, soil salinization, and fertilization and emphasize how optimal solutions for large-scale, long-term planning of soil and water resources in agroecosystems under uncertainty could be provided by methods from stochastic control, informed by physically and mathematically sound descriptions of ecohydrological and biogeochemical interactions. @article{porporato2015ecohydrological,&nbsp;&nbsp; doi = {10.1002/2015wr017289},&nbsp;&nbsp; year = {2015},&nbsp;&nbsp; publisher = {Wiley-Blackwell},&nbsp;&nbsp; author = {Amilcare Porporato and Xue Feng and Stefano Manzoni and Yair Mau and Anthony J. Parolari and Giulia Vico},&nbsp;&nbsp; title = {Ecohydrological modeling in agroecosystems: Examples and challenges},&nbsp;&nbsp; journal = {Water Resources Research},&nbsp;&nbsp; volume = {51},&nbsp;&nbsp; number = {7},&nbsp;&nbsp; pages = {5081--5099}, } Yair Mau and Amilcare Porporato. A dynamical system approach to soil salinity and sodicity. Advances in Water Resources, 83:68–76, 2015. doi: 10.1016/j.advwatres.2015.05.010 Abstract   BibTeX   PDF . Soil salinity and sodicity impose severe constrains to agriculture, especially in arid and semi-arid regions, where good-quality water for irrigation is scarce. While detailed models have been proposed in the past to describe the dynamics of salt and sodium in the soil, they typically require cumbersome calculations and are not amenable to theoretical analysis. Here we present an analytical model for the dynamics of salinity and sodicity in the root zone. We determine the dependence of steady-state salinity and sodicity levels on irrigation water quality and derive the trajectories in the phase space. The only stationary solution the equations admit is a stable node. Through numerical integration and analysis of the eigenvalues of the derived two-dimensional system of equations, the slower time scale associated with sodification is quantified with respect to the faster time scale associated to salinization. The role of different cation exchange equations (Gapon and Vanselow conventions) are shown to be practically the same with regard to the phase-space dynamics and the time scales. The results can be applied in controlling for low levels of salinity and sodicity, and in planning remediation strategies that are timely and economical. @article{mau2015dynamical,&nbsp;&nbsp; year = {2015},&nbsp;&nbsp; publisher = {Elsevier {BV}},&nbsp;&nbsp; volume = {83},&nbsp;&nbsp; pages = {68--76},&nbsp;&nbsp; author = {Yair Mau and Amilcare Porporato},&nbsp;&nbsp; title = {A dynamical system approach to soil salinity and sodicity},&nbsp;&nbsp; journal = {Advances in Water Resources},&nbsp;&nbsp; doi = {10.1016/j.advwatres.2015.05.010}, } Yair Mau, Lev Haim, and Ehud Meron. Reversing desertification as a spatial resonance problem. Physical Review E, 91(1):012903, 2015. doi: 10.1103/PhysRevE.91.012903 Abstract   BibTeX   PDF . An important environmental application of pattern control by periodic spatial forcing is the restoration of vegetation patterns in water-limited ecosystems that went through desertification. Vegetation restoration is often based on periodic landscape modulations that intercept overland water flow and form favorable conditions for vegetation growth. Viewing this method as a spatial resonance problem, we show that plain realizations of this method, assuming a complete vegetation response to the imposed modulation pattern, suffer from poor resilience to rainfall variability. By contrast, less intuitive realizations, based on the inherent spatial modes of vegetation growth and involving partial vegetation implantation, can be highly resilient and equally productive. We derive these results using two complementary models, a realistic vegetation model, and a simple pattern formation model that lends itself to mathematical analysis and highlights the universal aspects of the behaviors found with the vegetation model. We focus on reversing desertification as an outstanding environmental problem, but the main conclusions hold for any spatially forced system near the onset of a finite-wave-number instability that is subjected to noisy conditions. @article{mau2015reversing,&nbsp;&nbsp; title={Reversing desertification as a spatial resonance problem},&nbsp;&nbsp; author={Yair Mau and Lev Haim and Ehud Meron},&nbsp;&nbsp; journal={Physical Review E},&nbsp;&nbsp; volume={91},&nbsp;&nbsp; number={1},&nbsp;&nbsp; pages={012903},&nbsp;&nbsp; year={2015},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physreve.91.012903}, } Yair Mau, Xue Feng, and Amilcare Porporato. Multiplicative jump processes and applications to leaching of salt and contaminants in the soil. Physical Review E, 90(5):052128, 2014. doi: 10.1103/PhysRevE.90.052128 Abstract   BibTeX   PDF . We consider simple systems driven multiplicatively by white shot noise, which appear in the modeling of the dynamics of soil nutrients and contaminants. The dynamics of these systems is analyzed in two ways: solving a hierarchy of linear ordinary differential equations for the moments, which gives a time scale of convergence of the stationary probability density function; and characterizing the crossing properties, such as the mean first-passage time and the mean frequency of level crossing. These results are readily applicable to the study of geophysical systems, such as the problem of accumulation of salt in the root zone, i.e., soil salinization. @article{mau2014multiplicative,&nbsp;&nbsp; title={Multiplicative jump processes and applications to leaching of salt and contaminants in the soil},&nbsp;&nbsp; author={Yair Mau and Xue Feng and Amilcare Porporato},&nbsp;&nbsp; journal={Physical Review E},&nbsp;&nbsp; volume={90},&nbsp;&nbsp; number={5},&nbsp;&nbsp; pages={052128},&nbsp;&nbsp; year={2014},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physreve.90.052128}, } Lev Haim, Yair Mau, and Ehud Meron. Spatial forcing of pattern-forming systems that lack inversion symmetry. Physical Review E, 90(2):022904, 2014. doi: 10.1103/PhysRevE.90.022904 Abstract   BibTeX   PDF . The entrainment of periodic patterns to spatially periodic parametric forcing is studied. Using a weak nonlinear analysis of a simple pattern formation model we study the resonant responses of one-dimensional systems that lack inversion symmetry. Focusing on the first three n:1 resonances, in which the system adjusts its wavenumber to one nth of the forcing wavenumber, we delineate commonalities and differences among the resonances. Surprisingly, we find that all resonances show multiplicity of stable phase states, including the 1:1 resonance. The phase states in the 2:1 and 3:1 resonances, however, differ from those in the 1:1 resonance in remaining symmetric even when the inversion symmetry is broken. This is because of the existence of a discrete translation symmetry in the forced system. As a consequence, the 2:1 and 3:1 resonances show stationary phase fronts and patterns, whereas phase fronts within the 1:1 resonance are propagating and phase patterns are transients. In addition, we find substantial differences between the 2:1 resonance and the other two resonances. While the pattern forming instability in the 2:1 resonance is supercritical, in the 1:1 and 3:1 resonances it is subcritical, and while the inversion asymmetry extends the ranges of resonant solutions in the 1:1 and 3:1 resonances, it has no effect on the 2:1 resonance range. We conclude by discussing a few open questions. @article{haim2014spatial,&nbsp;&nbsp; title={Spatial forcing of pattern-forming systems that lack inversion symmetry},&nbsp;&nbsp; author={Lev Haim and Yair Mau and Ehud Meron},&nbsp;&nbsp; journal={Physical Review E},&nbsp;&nbsp; volume={90},&nbsp;&nbsp; number={2},&nbsp;&nbsp; pages={022904},&nbsp;&nbsp; year={2014},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physreve.90.022904}, } Yair Mau, Lev Haim, Aric Hagberg, and Ehud Meron. Competing resonances in spatially forced pattern-forming systems. Physical Review E, 88(3): 032917, 2013. doi: 10.1103/PhysRevE.88.032917 Abstract   BibTeX   PDF . Spatial periodic forcing can entrain a pattern-forming system in the same way as temporal periodic forcing can entrain an oscillator. The forcing can lock the pattern&#39;s wave number to a fraction of the forcing wave number within tonguelike domains in the forcing parameter plane, it can increase the pattern&#39;s amplitude, and it can also create patterns below their onset. We derive these results using a multiple-scale analysis of a spatially forced Swift-Hohenberg equation in one spatial dimension. In two spatial dimensions the one-dimensional forcing can induce a symmetry-breaking instability that leads to two-dimensional (2D) patterns, rectangular or oblique. These patterns resonate with the forcing by locking their wave-vector component in the forcing direction to half the forcing wave number. The range of this type of 2:1 resonance overlaps with the 1:1 resonance tongue of stripe patterns. Using a multiple-scale analysis in the overlap region we show that the 2D patterns can destabilize the 1:1 resonant stripes even at exact resonance. This result sheds new light on the use of spatial periodic forcing for controlling patterns. @article{mau2013competing,&nbsp;&nbsp; title={Competing resonances in spatially forced pattern-forming systems},&nbsp;&nbsp; author={Yair Mau and Lev Haim and Aric Hagberg and Ehud Meron},&nbsp;&nbsp; journal={Physical Review E},&nbsp;&nbsp; volume={88},&nbsp;&nbsp; number={3},&nbsp;&nbsp; pages={032917},&nbsp;&nbsp; year={2013},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physreve.88.032917}, } Yair Mau, Aric Hagberg, and Ehud Meron. Spatial periodic forcing can displace patterns it is intended to control. Physical Review Letters, 109 (3):034102, 2012. doi: 10.1103/PhysRevLett.109.034102 Abstract   BibTeX   PDF . Spatial periodic forcing of pattern-forming systems is an important, but lightly studied, method of controlling patterns. It can be used to control the amplitude and wave number of one-dimensional periodic patterns, to stabilize unstable patterns, and to induce them below instability onset. We show that, although in one spatial dimension the forcing acts to reinforce the patterns, in two dimensions it acts to destabilize or displace them by inducing two-dimensional rectangular and oblique patterns. @article{mau2012spatial,&nbsp;&nbsp; title={Spatial periodic forcing can displace patterns it is intended to control},&nbsp;&nbsp; author={Yair Mau and Aric Hagberg and Ehud Meron},&nbsp;&nbsp; journal={Physical Review Letters},&nbsp;&nbsp; volume={109},&nbsp;&nbsp; number={3},&nbsp;&nbsp; pages={034102},&nbsp;&nbsp; year={2012},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physrevlett.109.034102}, } Yair Mau, Aric Hagberg, and Ehud Meron. Dual-mode spiral vortices. Physical Review E, 80(6):065203, 2009. doi: 10.1103/physreve.80.065203 Abstract   BibTeX   PDF . We show that spiral vortices in oscillatory systems can lose stability to secondary modes to form dual-mode spiral vortices. The secondary modes grow at the vortex core where the oscillation amplitude vanishes but are nonlinearly damped by the oscillatory mode away from the core. Gradients of the oscillation phase, induced by the hosted secondary mode, can lead to additional hosting events that culminate in periodic core oscillations or in a novel form of spatiotemporal chaos. The results of this study apply to physical, chemical, and biological systems that go through cusp-Hopf, fold-Hopf, and Hopf-Turing bifurcations. @article{mau2009dual,&nbsp;&nbsp; title={Dual-mode spiral vortices},&nbsp;&nbsp; author={Yair Mau and Aric Hagberg and Ehud Meron},&nbsp;&nbsp; journal={Physical Review E},&nbsp;&nbsp; volume={80},&nbsp;&nbsp; number={6},&nbsp;&nbsp; pages={065203},&nbsp;&nbsp; year={2009},&nbsp;&nbsp; publisher={APS},&nbsp;&nbsp; doi = {10.1103/physreve.80.065203}, } Tip: find the BibTeX of any publication by copying its doi here: doi2bib.org. . Theses . PhD Thesis . Title: “Pattern Formation in Spatially Forced Systems: Application to Vegetation Restoration” Advisor: Prof. Ehud Meron. The Physics Department, The Ben-Gurion University of the Negev, Israel. PDF . Master’s Thesis . Title: “Localized Spatial Strutures in Non-Equilibrium Systems” Advisor: Prof. Ehud Meron. The Physics Department, The Ben-Gurion University of the Negev, Israel. PDF Watch pretty cool videos on this research!! .",
          "url": "https://yairmau.com/publications/",
          "relUrl": "/publications/",
          "date": ""
      }
      
  

  
      ,"page7": {
          "title": "Five-Star Content I Recommend",
          "content": "Five-Star Content I Recommend . . Books . [Check out my Goodreads profile]. . Superintelligence: Paths, Dangers, Strategies, by Nick Bostrom. | The Unfolding of Language: An Evolutionary Tour of Mankind’s Greatest Invention, by Guy Deutscher. | . Blogs . Wait but why, by Tim Urban. | Fuck Yeah Fluid Dynamics, by Nicole Sharp. | . Short stories . They’re made out of meat, by Terry Bisson. | The Sentinel, by Arthur C. Clarke. | On Exactitude in Science, by Jorge Luis Borges. | The Feeling Of Power , by Isaac Asimov. | . Technical stuff . Linux Shell Scripting Tutorial | Pythonic Perambulations, by Jake VanderPlas. | . YouTube channels . 3Blue1Brown, minute physics, Veritasium, Smarter Every Day, CGP Grey, Kurzgesagt, Primitive Technology, Vsauce, Nerdwriter, Mathologer, Sciencium, Steve Mould . Podcasts . Hardcore History with Dan Carlin, especially the series “Blueprint for Armageddon” and “Wrath of the Khans”. | 99% Invisible | Radiolab | Making Sense, with Sam Harris | .",
          "url": "https://yairmau.com/more/five-stars/",
          "relUrl": "/more/five-stars/",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "Science Communication",
          "content": "Science Communication . . Talks . A scientific talk is not a scientific paper, it is a completely different medium! Here are a few tips that I find useful. . ![](/images/phd-comics-presentation.jpg) Cartoon by Jorge Cham How To Give a Talk . [How To Give a Talk, by David L Stern.] . Excerpt: . Principle 1 - Don’t Put Words On Slides It may not seem intuitive, but including words on slides has a bigger detrimental effect on the quality of a talk than any other issue I will address. . The slides in most science talks contain many words. This simple fact has many consequences, none positive. Most obviously, words on slides impel listeners to read the words on the slide. If you are talking while they are reading, then you generate cognitive dissonance that makes it difficult for the audience to understand either your spoken words or your written words. So, if you want your audience to read the words on a slide, then, presumably, you should shut up. But, I don’t recommend that. Instead, just cut all the words form your slides. . The David Attenborough Style of Scientific Presentation . [The David Attenborough Style of Scientific Presentation.] . Excerpt: . Get into this mindset: your main job is to be an entertainer, not a scientist. Most scientists don’t do this, which is why most scientific talks are bad. The fact of the matter is that if the audience doesn’t understand and enjoy your talk, they won’t care if your science is good. . A LaTeX template . Check out a nice LaTeX template for presentations [here]. . . Visualizations . Visualizations can take a message very, very far. I put a lot of thinking into how to best express an idea. I believe that great graphs greatly improve a scientific paper, and a thoughful graph/animation surely brings home the main point of a talk. Here are a few thoughts on visualizations. . Inspiration . Hans Rosling, Gapminder | Max Roser, Our World in Data | Stephen Malinowski, Music Animation Machine | The Economist, Daily Chart | . Colors . Don’t use the rainbow color map. Why? [Read this], by Robert Kosara. . So how should you choose the colors for a graph? . Visit colorbrewer. It gives sequential, diverging and qualitative colormaps that can be chosen to be “colorblind safe”, “print safe”, or “photocopy safe”. Usually, it is the first and only tool I use. It’s just great! | Visit Adobe Color CC. It gives you much more freedom to play with the colors than colorbrewer. Use it wisely! | . More on color: read Subtleties of Color, by Robert Simmon. . Browse for ideas . The Data Visualisation Catalogue | .",
          "url": "https://yairmau.com/more/communication/",
          "relUrl": "/more/communication/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "LaTeX",
          "content": "$ LaTeX$ . . Equations . With $ LaTeX$ you can write beautiful equations like . Rμν−12gμν R+gμνΛ=8πGc4TμνR_{ mu nu} - {1 over 2}g_{ mu nu} ,R + g_{ mu nu} Lambda = displaystyle{8 pi G over c^4} T_{ mu nu}Rμν​−21​gμν​R+gμν​Λ=c48πG​Tμν​ or ϕ=1+11+11+⋯=1+52 phi = 1 + cfrac{1}{1+ cfrac{1}{1+ dotsb}}= frac{1+ sqrt{5}}{2}ϕ=1+1+1+⋯1​1​=21+5​​ . Learn more here. . Presentation . Make beautiful presentations using Beamer! Download a full working example of my favorite template [zip] [overleaf]. Browse the presentation below to get an idea. . Posters . Make beautiful posters with LaTeX. Portrait [zip] [overleaf] Landscape [zip] [overleaf] . . PhD Thesis . This template is based on my PhD thesis, it can make your life easier! . Download [zip] [overleaf]. | Don’t forget to read the file README.txt | Enjoy! | Hebrew . A LaTeX document with Hebrew text. Download .tex source here, and the pdf here. . See below a really practical use of the tools provided above. This is an exercise list in hebrew. Download .tex source here, and the pdf here. .",
          "url": "https://yairmau.com/tutorials/latex/",
          "relUrl": "/tutorials/latex/",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "Research",
          "content": "Research . . Interests . I’m interested in the interactions between soil, water and vegetation in drylands, in both natural and agricultural ecosystems. Our goal is to understand how the basic processes and feedbacks influence the ecosystem dynamics, and how this knowledge can be used to control those systems. . The common theme between my different research projects is land/ecosystem degradation caused by human activity. . Our research is based on “simple” mathematical models, that strive to capture the essential physical processes, while providing deep insight into the dynamics of the system. Some of the tools we use in the modeling of environmental questions come from dynamical systems, statistical physics and optimal control theory. . We are recruiting excellent students to our group! Here you can find some more detail on our current projects. . Projects . Soil salinization . Every week, the world loses an area greater than Manhattan to salt-related soil degradation. It is estimated that 20% of all irrigated lands are affected by salinity, with an even higher fraction of salt-degraded soils in arid and semiarid regions. Salt accumulation in the soil, usually induced by insufficient drainage and poor-quality irrigation water, imposes severe restrictions on food production. . Some of the questions we’d like to answer are: On what time scales the salinization process occurs, and what is the effect of a drier and more extreme climate on the salt buildup? What are the critical thresholds for (irreversible) soil degradation? How can we rehabilitate a degraded soil by making optimal use of the resources available? What role can treated wastewater have on dryland agriculture that is sustainable with respect to the ecosystem services? ​ . Nutrient dynamics . Nitrogen management is of critical importance to food security and environmental sustainability. Because of artificial fertilizers, we have seen a sharp increase in agricultural production in the last century. However, the same nitrogen available to plant uptake, can polute the groundwater, streams and lakes, and be released as nitrous oxide, a potent greenhouse gas. . We would like to understand how the nonlinear dynamics of nitrogen and carbon cycling is influenced by the hydrological cycle. In particular, we would like to study the influence of random rainfall events and a changing climate in driving these cycles. . Tree water balance in a semiarid pine forest and rates of survival under global climate change . Longer droughts and temperature rise impose severe risks of widespread forest mortality. Drought-adapted trees in semiarid and arid ecosystems cope with water stress by regulating their transpiration rate, thus saving internal water content and avoiding runaway decline in water potential. . Our goal is to characterize how trees manage their water budget in order to increase survival probability under prolonged drought periods. . Our group will approach these objectives by modeling the soil-tree-atmosphere water transport to assess tree survival probability for current and future climate scenarios. A collaboration with an experimental group will provide us data from a research station in the Yatir forest, in the Negev desert (see map above). . Studying the fate of the Yatir forest gives us a window into the future, for it is expected that many ecosystems around the world will face increasing drought stress as a result of climate change. .",
          "url": "https://yairmau.com/research/",
          "relUrl": "/research/",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "Tutorials",
          "content": "Tutorials . . Python tutorial . $ , rightarrow ,$ $ LaTeX$ tutorial .",
          "url": "https://yairmau.com/tutorials/",
          "relUrl": "/tutorials/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "Group",
          "content": "Group . . Yair Mau, Principal Investigator . . . Isaac Kramer, PhD student . . . Nurit Goldberg, PhD student . . . Michael Avi Gross, MSc student . . . Taiwo Adeyemo, MSc student . . . Avigail Kaner, Research Specialist . . . Group Pictures . 2020-03-18, First Corona zoom meeting . . 2019-05-21, Avigail teaching electromagnetism . The automatic subtitle system took some liberty there 🤣 The original sentence was . השיטה הזאת של B , v ו-F האגודל נותנת את הכיוון של v קרוס B . . 2019-01-10, Yatir Forest . Avi Gross, Avigail Kaner, Isaac Kramer, Yair Mau .",
          "url": "https://yairmau.com/group/",
          "relUrl": "/group/",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "Physics A (extended) - 71031",
          "content": "Physics A (extended) - 71031 . . Under construction… .",
          "url": "https://yairmau.com/teaching/physics71031/",
          "relUrl": "/teaching/physics71031/",
          "date": ""
      }
      
  

  
      ,"page14": {
          "title": "Surface Hydrology",
          "content": "Surface Hydrology . . Under construction… .",
          "url": "https://yairmau.com/teaching/hydrology/",
          "relUrl": "/teaching/hydrology/",
          "date": ""
      }
      
  

  
      ,"page15": {
          "title": "Surface Hydrology",
          "content": "Surface Hydrology . . Under construction… .",
          "url": "https://yairmau.com/teaching/agrotech/",
          "relUrl": "/teaching/agrotech/",
          "date": ""
      }
      
  

  
      ,"page16": {
          "title": "Teaching",
          "content": "Teaching . . I currently teach the following courses at the Hebrew University of Jerusalem, campus Rehovot. . Physics A (extended) . Surface Hydrology . Agrotech Lab .",
          "url": "https://yairmau.com/teaching/",
          "relUrl": "/teaching/",
          "date": ""
      }
      
  

  
      ,"page17": {
          "title": "Python",
          "content": "Python . . Python is a great language for scientific computing, most of the programming done by our group is in python. We provide below some links for learning this language, and below we offer many python code examples. You are invited to download these codes, tweak with them, break them, hack them as you wish! . Most codes focus on plotting, but other algorithms such as numerical integration and Fourier transforms can also be found. . Some useful links for learning python: . Python Data Science Handbook | Learn Python the Hard Way | A Crash Course in Python for Scientists | Software Carpentry | Fun with Lists | Python | Codecademy | Scipy Lecture Notes | A gallery of interesting IPython Notebooks | Think Python: How to Think Like a Computer Scientist | The Python Graph Gallery | . This might be overwhelming, so I suggest you to follow this: . My advice on learning Python:Don&#39;t set out to &quot;learn Python&quot;. Choose a problem you&#39;re interested in and learn to solve it with Python. . &mdash; Jake VanderPlas (@jakevdp) September 10, 2017 Start by downloading Anaconda, a package manager application that will help you get started with python in all platforms. . Make sure you are acquainted with ipython (interactive python, try it here), and with Jupyter notebook. ​ . I recommend Sublime Text for writing code, and you can install the Anaconda package to it to have a smooth IDE. [not the same anaconda as mentioned above! Yes, it’s confusing, I know.] . . Fitzhugh-Nagumo — Labyrinthine Patterns . Jupyter notebook . Main features: how to make a movie, time-integration methods (semi-spectral and Euler) . . Conway’s Game of Life, acorn initial conditionnn . Jupyter notebook . This is a (slightly) modified version of Glowing Python’s code. I make it available here because it features a few nice things: . how to make a movie using matplotlib.animation | how to write a generator (function with yield) | how to plot a sparce array (spy) | . Main features: matplotlib.animation, yield, with, matplotlib.pyplot.spy . . Least squares fit of nonlinear function . Jupyter notebook . Main features: LaTeX text, scipy.optimize.curve_fit, matplotlib.patches . . Fun with histograms . Jupyter notebook . Main features: np.histogram, plt.hist, plt.bar, plt.barh, gridspec, least squares fit of nonlinear function, plt.hist2d . . Fancy subplot grid . Jupyter notebook . Highly customizable subplot structure. Also, figure contains several axis configurations and labeling options. Main features: gridspec subplots; numpy-compatible heaviside; label, ticks and axis manipulations; log scale . . Streamplot . Jupyter notebook . Streamplot of a two-dimensional linear system, with eigenvectors and nullclines. Python shows LaTeX equations beautifully. Main features: meshgrid, streamplot, contour, legend, LaTeX . . The time dependent Ginzburg-Landau equation . Jupyter notebook . Numerical integration of a parabolic partial differential equation, using finite differences: Euler step to advance time, and a 5-point stencil to approximate the Laplacian. Main features: imshow, colorbar, set_data . . The double pendulum . Jupyter notebook . Numerical integration of the equations of motion of the double pendulum. This time, scipy’s ode itegrator was used. Nice example of how to make a movie. Main features: scipy.integrate.ode, set_data, set_aspect(&#39;equal&#39;), remove plot, movie . . The Hilbert curve . Jupyter notebook . Construction of the Hilbert curve as a Lindenmayer system (L-system). Main features: string operations, movie . . A hysteresis mechanism . Jupyter notebook . Hysteresis mechanism created by the bistability of states. System goes to minimum points u in the energy functional $f=u^4-2u^2+hu$. The parameter $h$ is ramped down and up during this simulation. Main features: sympy analytical calculations, numpy dtypes, movie . . Contour plot . Jupyter notebook . Contour plot with many customizable options. Also, a nice way to truncate a colormap so it gives the color range that you want. Main features: truncate_colormap, contour, contourf (fill), clabel (contour label) . . . Least action principle on the beach . Jupyter notebook . How should ​lifeguard run in order to save a drowning person in minimal time? Answer: by using Snell’s law of refraction! This is a nice example how to use spines (x and y axis form a cross), instead of rectangular figures as usual. Also, “annotations” are used, where things can be labeled with the help of arrows. Main features: spines, matplotlib.patches.Rectangle, annotate . . . This website’s logo . Jupyter notebook . Simple example of how to make a figure without any visible axes. Main features: set_axis_off, fill_between, matplotlib inline plot on Jupyter . . . Bars . Jupyter notebook . Horizontal and vertical bars, with numeric legends. Unicode support. Main features: unicode, bar, barh, grid . .",
          "url": "https://yairmau.com/tutorials/python/",
          "relUrl": "/tutorials/python/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page24": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yairmau.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}