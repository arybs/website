{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yairmau.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yairmau.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fitzhugh-Nagumo Equation",
            "content": "Introduction . We simulate the Fitzhugh-Nagumo equations $$ u_t = u - u^3 - v + nabla^2 u v_t = epsilon(u - a_1 v - a_0) + delta nabla^2 v, $$ using the semi-spectral time integration method. . This simultation was heavily inspired by Aric Hagberg&#39;s simulation in &quot;From Labyrinthine Patterns to Spiral Turbulence&quot;, PRL 1994. . The code below provides 3 initial conditions, &quot;squiggle, blocks, and random&quot;. For time integration, besides the spectral method, we also provide the Euler method. Details about the semi-spectral method can be found after the code. . Parameters: $ epsilon=0.3$, $ delta=2.0$, $a_1=1.4$, and $a_0=0$. . Other simulations and Python examples can be found on my website: yairmau.com. . The code . import packages . import numpy as np import matplotlib.pyplot as plt import os from matplotlib import rcParams rcParams[&#39;font.family&#39;] = &#39;monospace&#39; . define class with all the methods . class FitzHughNagumo(object): def __init__(self, epsilon=0.3, delta=2.0, a1=1.4, a0=0.0, n=(256, 256), l=(400, 400), start=0.0, step=1.0, finish=2000.0, dt=0.1, integration_type=&quot;spectral&quot;): self.epsilon = epsilon self.delta = delta self.a1 = a1 self.a0 = a0 self.n = n self.l = l self.start = start self.step = step self.finish = finish self.dt = dt self.integration_type = integration_type self.rhs_a = np.zeros((2, self.n[0], self.n[1])) def spectral_multiplier(self): dx = float(self.l[0]) / self.n[0] dy = float(self.l[1]) / self.n[1] # wave numbers fx = 2.0 * np.pi * np.fft.fftfreq(self.n[0], dx) fy = 2.0 * np.pi * np.fft.fftfreq(self.n[1], dy) kx = np.outer(fx, np.ones(self.n[0])) ky = np.outer(np.ones(self.n[1]), fy) # multiplier mult_a = np.zeros((2, self.n[0], self.n[1])) mult_a[0] = np.exp(-(kx ** 2 + ky ** 2) * self.dt) # u mult_a[1] = np.exp(-self.delta * (kx ** 2 + ky ** 2) * self.dt) # v return mult_a def rhs_reaction(self, a): u = a[0] # alias v = a[1] # alias # FHN right hand side self.rhs_a[0] = u - u ** 3 - v self.rhs_a[1] = self.epsilon * (u - self.a1 * v - self.a0) return self.rhs_a def rhs_euler(self, a): # boundary conditions in laplacian laplacian = self.periodic_laplacian u = a[0] # alias v = a[1] # alias dx = float(self.l[0]) / self.n[0] # FHN right hand side self.rhs_a[0] = u - u ** 3 - v + laplacian(u, dx=dx) self.rhs_a[1] = self.epsilon * (u - self.a1 * v - self.a0) + self.delta * laplacian(v, dx=dx) return self.rhs_a def draw(self, a, t): u = a[0] self.im = plt.imshow(u.real, cmap=&quot;Greys_r&quot;, origin=&#39;lower&#39;, vmin=-0.534522, vmax=0.534522, interpolation=&quot;gaussian&quot;) self.title = plt.title(&#39;time = {:&gt;4.0f}&#39;.format(0)) plt.xticks([]) plt.yticks([]) self.im.figure.canvas.draw() def draw_update(self, a, t): u = a[0] self.title.set_text(&#39;time = {:&gt;4.0f}&#39;.format(t)) self.im.set_data(u.real) self.im.figure.canvas.draw() def save_frame(self, i): fname = &quot;_tmp{:05d}.png&quot;.format(i) self.frame_names.append(fname) self.fig.savefig(fname, bbox_inches=&#39;tight&#39;, dpi=300) def periodic_laplacian(self, u, dx=1): &quot;&quot;&quot;Return finite difference Laplacian approximation of 2d array. Uses periodic boundary conditions and a 2nd order approximation.&quot;&quot;&quot; laplacian = (np.roll(u, -1, axis=0) + np.roll(u, +1, axis=0) + np.roll(u, -1, axis=1) + np.roll(u, +1, axis=1) - 4.0 * u) / (dx ** 2) return laplacian def random_ic(self): return 0.5 * (np.random.random((2, self.n[0], self.n[1])) - 0.5) def blocks_ic(self): a = np.ones((2, self.n[0], self.n[1])) a[0] = 0.534522 a[1] = 0.381802 n = self.n p = n[0] / 8 a[0][3 * p - 4:3 * p + 4, 5 * p - 4:5 * p + 4] = -0.534522 a[0][6 * p - 4:6 * p + 4, 3 * p - 4:3 * p + 4] = -0.534522 return a def squiggle_ic(self): a = np.ones((2, self.n[0], self.n[1])) l = self.l uplus = 0.534522 vplus = 0.381802 uminus = -uplus X, Y = np.meshgrid(np.linspace(0, self.l[0], self.n[0]), np.linspace(0, self.l[0], self.n[0])) cos_term = 0.05 * l[0] * np.sin(10 * (2 * np.pi) * Y / l[1] + np.pi * 0.3) exp_term = np.exp(-((Y - l[1] / 2) / (0.1 * l[1])) ** 2) width = 0.05 * l[0] Z = np.exp(-((X - l[0] / 2 + cos_term * exp_term) / width) ** 2) a[0] = uplus a[1] = vplus a[0][Z &gt; 0.8] = uminus return a . run simulation, save snapshots . plt.ion() plt.clf() foo = FitzHughNagumo() foo.fig = plt.figure(1) ax = foo.fig.add_subplot(111) a = foo.squiggle_ic() mult_a = foo.spectral_multiplier() fft_a = np.fft.fftn(a, axes=(1, 2)) t = foo.start foo.draw(a, t) foo.frame_names = [] foo.save_frame(0) for i, tout in enumerate(np.arange(foo.start + foo.step, foo.finish + foo.step, foo.step)): while t &lt; tout: if foo.integration_type == &quot;spectral&quot;: rhs_a = foo.rhs_reaction(a) fft_a = mult_a * (fft_a + foo.dt * np.fft.fftn(rhs_a, axes=(1, 2))) a = np.fft.ifftn(fft_a, axes=(1, 2)) if foo.integration_type == &quot;euler&quot;: a = a + foo.dt * foo.rhs_euler(a) t += foo.dt foo.draw_update(a, t) foo.save_frame(i + 1) . make movie, delete snapshots . fps = 24 frames = &quot;_tmp%5d.png&quot; movie_command = &quot;ffmpeg -y -r {:} -i {:} fhn.mp4&quot;.format(fps, frames) os.system(movie_command) for fname in foo.frame_names: os.remove(fname) . UsageError: Line magic function `%%javascript` not found. . The semi-spectral method . The explanation below was taken from my thesis: &quot;Pattern Formation in Spatially Forced Systems: Application to Vegetation Restoration&quot;. . The semi-spectral method is extremely useful when working with reaction-diffusion systems, and with parabolic PDEs in general. This was the method used to run all the simulations of the Swift-Hohenberg model in this thesis, and it proved to be reliable and fast. The explanation below is a summary of &quot;Spectral algorithms for reaction-diffusion equations&quot;, by Richard V. Craster and Roberto Sassi, with a step by step recipe, so the reader can easily apply the method to any suitable problem. . the method . The semi-spectral transform method is very useful when we have to integrate a system that evolves really slowly. Let us say we have a (parabolic) system of the form: $$ begin{equation*} u_t= epsilon u + f(u)+D nabla^2u, label{eq:1} tag{1} end{equation*} $$ . where $f(u)$ is a nonlinear function. First, we compute the Fourier transform of $ eqref{eq:1}$: $$ begin{equation*} hat{u}_t= epsilon hat{u} + hat{f}(u)-k^2D hat{u}, label{eq:2} tag{2} end{equation*} $$ where the hat denotes the Fourier transform. . We rearrange $ eqref{eq:2}$ in the following way: $$ begin{equation*} hat{u}_t+a hat{u}= hat{f}(u), label{eq:3} tag{3} end{equation*} $$ where $a=- epsilon +k^2D$, and now we make a variable substitution $$ begin{align*} hat{v}(k,t)&amp;= ; hat{u}(k,t) ,e^{at} label{eq:4a} tag{4a} hat{v}_t&amp;= ; hat{u}_te^{at}+a hat{u} ,e^{at}. label{eq:4b} tag{4b} end{align*} $$ . We multiply $ eqref{eq:3}$ by $e^{at}$ and we finally get $$ begin{equation*} hat{v}_t=e^{at} hat{f}(u). label{eq:5} tag{5} end{equation*} $$ . We can now advance $ hat{v}$ in time using a simple Euler step $$ begin{equation*} hat{v}^{t_{n+1}}= hat{v}^{t_n}+ Delta t left( e^{at_n} hat{f}(u) right). label{eq:6} tag{6} end{equation*} $$ . What we really want is $ hat{u}$, which, according to $ eqref{eq:4a}$, is given by . $$ begin{align*} hat{u}^{t_{n+1}}=&amp; ; hat{v}^{t_{n+1}}e^{-at_{n+1}} label{eq:7a} tag{7a} =&amp; ; hat{v}^{t_{n+1}}e^{-at_{n}}e^{-a Delta t} label{eq:7b} tag{7b} =&amp; ; left( hat{v}^{t_n}+ Delta t ; e^{a t_n} hat{f}(u) right)e^{-at_{n}}e^{-a Delta t} label{eq:7c} tag{7c} =&amp; ; left( hat{v}^{t_n}e^{-at_{n}}+ Delta t ;{e^{a t_n}} hat{f}(u) {e^{-at_{n}}} right)e^{-a Delta t} label{eq:7d} tag{7d} =&amp; ; left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{-a Delta t} label{eq:7e} tag{7e}. end{align*} $$There is actually no need to use the variable substitution in $ eqref{eq:4a}$. We now have an expression for $ hat{u}^{t_{n+1}}$: $$ begin{equation*} hat{u}^{t_{n+1}}= left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{-a Delta t}. label{eq:8} tag{8} end{equation*} $$ . Now it is time to go back from the Fourier space to the real space, and for that we use an inverse Fourier transform $$ u^{t_{n+1}}= mathcal{F}^{-1}[ hat{u}^{t_{n+1}}]. label{eq:9} tag{9} $$ . step by step . To implement this technique, one just has to follow the steps below: . Calculate the Fourier transform of $u$: $ hat{u}= mathcal{F}[u]$. | Have $f(u)$ calculated and then take its Fourier transform: $ hat{f}(u)= mathcal{F}[f(u)]$. | For a given lattice with $N$ points, and $ delta x$ being the distance between them, make the frequency bin vector (matrix) $k$ for your one (two) dimensional system. In python the command would be numpy.fft.fftfreq(N, dx). The frequency bin vector $k$ looks like: | . $$ begin{align} k&amp;=2 pi cdot left[ 0,1, cdots, tfrac{N}{2}-1,- tfrac{N}{2}, cdots,-1 right]/(N , delta x), qquad mbox{if N is even;} label{eq:10a} tag{10a} k&amp;=2 pi cdot left[ 0,1, cdots, tfrac{N-1}{2},- tfrac{N-1}{2}, cdots,-1 right]/(N , delta x), qquad mbox{if N is odd.} label{eq:10b} tag{10b} end{align} $$Remember that the domain size is given by $L=N , delta x$, which means that the denominator in the expressions above can be written simply as $L$. It is clear from that fact that $ delta k$, the tiniest slice of the Fourier space is $ delta k=2 pi/L$. Corollary: if you want to divide the Fourier space into very many parts, simply have a huge domain. If the system is two-dimensional, then have $k_x$ and $k_y$ calculated separately. The domain might not be square ($L_x neq L_y$), and you might want to divide the domain into a different number of points ($Nx neq Ny$). Anyway, prepare one-dimensional arrays of $k_x$ and $k_y$ as explained above, and then make an outer product of these arrays with a ones array of length $N$, as following: . $$ k_{x,2d} = begin{pmatrix} 1 1 vdots 1 end{pmatrix} begin{pmatrix} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} end{pmatrix} = begin{pmatrix} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} &amp; vdots &amp; &amp; k_{x1} &amp; k_{x2} &amp; ... &amp; k_{xN} end{pmatrix} label{eq:11} tag{11} $$and . $$ k_{y,2d} = begin{pmatrix} k_{x1} k_{x2} vdots k_{xN} end{pmatrix} begin{pmatrix} 1 &amp; 1 &amp; ... &amp; 1 end{pmatrix} = begin{pmatrix} k_{y1} &amp; k_{y1} &amp; &amp; k_{y1} k_{y2} &amp; k_{y2} &amp; ... &amp; k_{y2} vdots &amp; vdots &amp; &amp; vdots k_{yN} &amp; k_{yN} &amp; &amp; k_{yN} end{pmatrix}. label{eq:12} tag{12} $$Then factor $e^{-a Delta t}$ equals . $$ e^{-a Delta t}= e^{ left[ epsilon-D(k_x^2+k_y^2) right] Delta t}, label{eq:13} tag{13} $$where $k_x^2$ is the element-wise exponentiation of the 2d array $k_{x,2d}$. . Now that we have all the factors we need, we simply calculate $$ hat{u}^{t_{n+1}}= left( hat{u}^{t_n}+ Delta t hat{f}(u) right)e^{ left[ epsilon-D(k_x^2+k_y^2) right] Delta t}. label{eq:14} tag{14} $$ | We finally go back to the real space by applying the inverse Fourier transform: $u^{t_{n+1}}= mathcal{F}^{-1}[ hat{u}^{t_{n+1}}]$. | . example . For the parametrically forced Swift-Hohenberg equation $$ frac{ partial u}{ partial t} = [ epsilon + gamma cos(k_f x)]u - u^3 -( nabla^2+k_0^2)^2 u, label{eq:15} tag{15} $$ we have $$ f(u)= -u^3 + gamma u cos(k_f x), qquad a = epsilon - left(k_0- k_x^2 - k_y^2 right)^2. label{eq:16} tag{16} $$ .",
            "url": "https://yairmau.com/jupyter/2020/01/01/fhn.html",
            "relUrl": "/jupyter/2020/01/01/fhn.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me, Yair",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yairmau.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yairmau.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}